
Mini_Project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  000025ca  0000265e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800186  00800186  00002784  2**0
                  ALLOC
  3 .stab         00001ee4  00000000  00000000  00002784  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f96  00000000  00000000  00004668  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000055fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000057be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  000059d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00007fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000094b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000a7c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000aca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b6c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <main>
      8a:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 12 	jmp	0x240e	; 0x240e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 12 	jmp	0x240e	; 0x240e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e7       	ldi	r22, 0x7D	; 125
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 17 12 	jmp	0x242e	; 0x242e <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	eb 57       	subi	r30, 0x7B	; 123
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_init>:
/*
 * Description :
 * Function responsible for initialize the ADC peripheral.
 */
void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <ADC_init+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
	/* Puts the input value of Vref in ADMUX register last 2 bits */
	ADMUX = (ADMUX & 0x3F) | (((Config_Ptr -> ref_volt) & 0x03) << 6);
     ef8:	a7 e2       	ldi	r26, 0x27	; 39
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e7 e2       	ldi	r30, 0x27	; 39
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	28 2f       	mov	r18, r24
     f04:	2f 73       	andi	r18, 0x3F	; 63
     f06:	e9 81       	ldd	r30, Y+1	; 0x01
     f08:	fa 81       	ldd	r31, Y+2	; 0x02
     f0a:	80 81       	ld	r24, Z
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	00 24       	eor	r0, r0
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	07 94       	ror	r0
     f18:	96 95       	lsr	r25
     f1a:	87 95       	ror	r24
     f1c:	07 94       	ror	r0
     f1e:	98 2f       	mov	r25, r24
     f20:	80 2d       	mov	r24, r0
     f22:	82 2b       	or	r24, r18
     f24:	8c 93       	st	X, r24

	/* Puts the input value of prescaler in ADCSRA register first 3 bits */
	ADCSRA = (ADCSRA & 0xF8) | ((Config_Ptr -> prescaler) & 0x07);
     f26:	a6 e2       	ldi	r26, 0x26	; 38
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e6 e2       	ldi	r30, 0x26	; 38
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	98 2f       	mov	r25, r24
     f32:	98 7f       	andi	r25, 0xF8	; 248
     f34:	e9 81       	ldd	r30, Y+1	; 0x01
     f36:	fa 81       	ldd	r31, Y+2	; 0x02
     f38:	81 81       	ldd	r24, Z+1	; 0x01
     f3a:	87 70       	andi	r24, 0x07	; 7
     f3c:	89 2b       	or	r24, r25
     f3e:	8c 93       	st	X, r24

	SET_BIT (ADCSRA, ADEN);           /* Enables the ADC peripheral */
     f40:	a6 e2       	ldi	r26, 0x26	; 38
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e6 e2       	ldi	r30, 0x26	; 38
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	80 68       	ori	r24, 0x80	; 128
     f4c:	8c 93       	st	X, r24
}
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <ADC_readChannel>:
 * Description :
 * Function responsible for read analog data from a certain ADC channel
 * and convert it to digital using the ADC driver.
 */
uint16 ADC_readChannel (uint8 channelNum)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	0f 92       	push	r0
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0xE0) | (channelNum & 0x07);   /* Selects the ADC channel and puts it in ADMUX register */
     f64:	a7 e2       	ldi	r26, 0x27	; 39
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e7 e2       	ldi	r30, 0x27	; 39
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	98 2f       	mov	r25, r24
     f70:	90 7e       	andi	r25, 0xE0	; 224
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	87 70       	andi	r24, 0x07	; 7
     f76:	89 2b       	or	r24, r25
     f78:	8c 93       	st	X, r24
	SET_BIT (ADCSRA, ADSC);  			   		    /* Start the conversion for this channel */
     f7a:	a6 e2       	ldi	r26, 0x26	; 38
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e6 e2       	ldi	r30, 0x26	; 38
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	80 64       	ori	r24, 0x40	; 64
     f86:	8c 93       	st	X, r24
	while (BIT_IS_CLEAR (ADCSRA, ADIF)); 	        /* polling on the flag until the conversion is done */
     f88:	e6 e2       	ldi	r30, 0x26	; 38
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	80 71       	andi	r24, 0x10	; 16
     f94:	90 70       	andi	r25, 0x00	; 0
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	b9 f3       	breq	.-18     	; 0xf88 <ADC_readChannel+0x30>
	SET_BIT (ADCSRA, ADIF);    				        /* Reset the flag by putting logic high */
     f9a:	a6 e2       	ldi	r26, 0x26	; 38
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e6 e2       	ldi	r30, 0x26	; 38
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	80 61       	ori	r24, 0x10	; 16
     fa6:	8c 93       	st	X, r24
	return (ADC & 0x03FF);     					    /* Returning the digital value after conversion */
     fa8:	e4 e2       	ldi	r30, 0x24	; 36
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	91 81       	ldd	r25, Z+1	; 0x01
     fb0:	93 70       	andi	r25, 0x03	; 3
}
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <ADC_deinit>:
/*
 * Description :
 * Function responsible for de-initialize the ADC peripheral.
 */
void ADC_deinit (void)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
	/* Clear the whole ADC registers */
	ADMUX = 0;
     fc2:	e7 e2       	ldi	r30, 0x27	; 39
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	10 82       	st	Z, r1
	ADCSRA = 0;
     fc8:	e6 e2       	ldi	r30, 0x26	; 38
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	10 82       	st	Z, r1

	CLEAR_BIT (ADCSRA, ADEN);                       /* De-enable the ADC peripheral */
     fce:	a6 e2       	ldi	r26, 0x26	; 38
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e6 e2       	ldi	r30, 0x26	; 38
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8f 77       	andi	r24, 0x7F	; 127
     fda:	8c 93       	st	X, r24
}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <DcMotor_init>:
 * Description :
 * 1. The Function responsible for setup the direction for the two motor pins.
 * 2. Stop the DC-Motor at the beginning.
 */
void DcMotor_init (void)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	/* Set the two motor pins as output pins */
	GPIO_setupPinDirection (DC_PORT, DC_IN1_PIN, PIN_OUTPUT);
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	41 e0       	ldi	r20, 0x01	; 1
     ff0:	0e 94 74 08 	call	0x10e8	; 0x10e8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection (DC_PORT, DC_IN2_PIN, PIN_OUTPUT);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	0e 94 74 08 	call	0x10e8	; 0x10e8 <GPIO_setupPinDirection>

	/* Stop the motor at the beginning */
	GPIO_writePin (DC_PORT, DC_IN1_PIN, LOGIC_LOW);
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
	GPIO_writePin (DC_PORT, DC_IN2_PIN, LOGIC_LOW);
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <DcMotor_rotate>:
 * 1. The function responsible for rotate the DC Motor CW/ or CCW or
 * stop the motor based on the direction input value.
 * 2. Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_rotate (DcMotor_Direction dir, uint8 speed)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <DcMotor_rotate+0x6>
    101e:	0f 92       	push	r0
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	8a 83       	std	Y+2, r24	; 0x02
    1026:	6b 83       	std	Y+3, r22	; 0x03
	uint8 dutyCycle = 0;
    1028:	19 82       	std	Y+1, r1	; 0x01

	/* Set the out put of the two motor pins to change its rotation direction depending on the input */
	if (dir == CW)
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	88 23       	and	r24, r24
    102e:	59 f4       	brne	.+22     	; 0x1046 <DcMotor_rotate+0x2e>
	{
		GPIO_writePin (DC_PORT, DC_IN1_PIN, LOGIC_LOW);
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
		GPIO_writePin (DC_PORT, DC_IN2_PIN, LOGIC_HIGH);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	41 e0       	ldi	r20, 0x01	; 1
    1040:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
    1044:	0d c0       	rjmp	.+26     	; 0x1060 <DcMotor_rotate+0x48>
	}

	else if (dir == CCW)
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	51 f4       	brne	.+20     	; 0x1060 <DcMotor_rotate+0x48>
	{
		GPIO_writePin (DC_PORT, DC_IN1_PIN, LOGIC_HIGH);
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	41 e0       	ldi	r20, 0x01	; 1
    1052:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
		GPIO_writePin (DC_PORT, DC_IN2_PIN, LOGIC_LOW);
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
	}

	/* The equation to transform the speed into duty cycle and send to the timer driver */
	dutyCycle = (uint8)(((float32)speed / DC_MAX_SPEED) * 100);
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a0 e0       	ldi	r26, 0x00	; 0
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	48 ec       	ldi	r20, 0xC8	; 200
    1080:	52 e4       	ldi	r21, 0x42	; 66
    1082:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	48 ec       	ldi	r20, 0xC8	; 200
    1094:	52 e4       	ldi	r21, 0x42	; 66
    1096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	bc 01       	movw	r22, r24
    10a0:	cd 01       	movw	r24, r26
    10a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_start (dutyCycle);
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	0e 94 69 11 	call	0x22d2	; 0x22d2 <PWM_Timer0_start>
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <DcMotor_stop>:
 * Description :
 * 1. The Function responsible for stop the motor rotation by stoping the two motor pins.
 * 2. Stop PWM wave generation.
 */
void DcMotor_stop (void)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	DcMotor_rotate (CW, DC_MIN_SPEED);                    /* Stop the PWM wave generation */
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	0e 94 0c 08 	call	0x1018	; 0x1018 <DcMotor_rotate>
	GPIO_writePin (DC_PORT, DC_IN1_PIN, LOGIC_LOW);       /* Stop the first motor pin */
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
	GPIO_writePin (DC_PORT, DC_IN2_PIN, LOGIC_LOW);       /* Stop the second motor pin */
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <GPIO_setupPinDirection+0x6>
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <GPIO_setupPinDirection+0x8>
    10f0:	0f 92       	push	r0
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	6a 83       	std	Y+2, r22	; 0x02
    10fa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	88 30       	cpi	r24, 0x08	; 8
    1100:	08 f0       	brcs	.+2      	; 0x1104 <GPIO_setupPinDirection+0x1c>
    1102:	d5 c0       	rjmp	.+426    	; 0x12ae <GPIO_setupPinDirection+0x1c6>
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	84 30       	cpi	r24, 0x04	; 4
    1108:	08 f0       	brcs	.+2      	; 0x110c <GPIO_setupPinDirection+0x24>
    110a:	d1 c0       	rjmp	.+418    	; 0x12ae <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	3d 83       	std	Y+5, r19	; 0x05
    1114:	2c 83       	std	Y+4, r18	; 0x04
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	91 05       	cpc	r25, r1
    111e:	09 f4       	brne	.+2      	; 0x1122 <GPIO_setupPinDirection+0x3a>
    1120:	43 c0       	rjmp	.+134    	; 0x11a8 <GPIO_setupPinDirection+0xc0>
    1122:	2c 81       	ldd	r18, Y+4	; 0x04
    1124:	3d 81       	ldd	r19, Y+5	; 0x05
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	2c f4       	brge	.+10     	; 0x1136 <GPIO_setupPinDirection+0x4e>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	71 f0       	breq	.+28     	; 0x1150 <GPIO_setupPinDirection+0x68>
    1134:	bc c0       	rjmp	.+376    	; 0x12ae <GPIO_setupPinDirection+0x1c6>
    1136:	2c 81       	ldd	r18, Y+4	; 0x04
    1138:	3d 81       	ldd	r19, Y+5	; 0x05
    113a:	22 30       	cpi	r18, 0x02	; 2
    113c:	31 05       	cpc	r19, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <GPIO_setupPinDirection+0x5a>
    1140:	5f c0       	rjmp	.+190    	; 0x1200 <GPIO_setupPinDirection+0x118>
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	9d 81       	ldd	r25, Y+5	; 0x05
    1146:	83 30       	cpi	r24, 0x03	; 3
    1148:	91 05       	cpc	r25, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <GPIO_setupPinDirection+0x66>
    114c:	85 c0       	rjmp	.+266    	; 0x1258 <GPIO_setupPinDirection+0x170>
    114e:	af c0       	rjmp	.+350    	; 0x12ae <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	a1 f4       	brne	.+40     	; 0x117e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1156:	aa e3       	ldi	r26, 0x3A	; 58
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	ea e3       	ldi	r30, 0x3A	; 58
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <GPIO_setupPinDirection+0x8c>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <GPIO_setupPinDirection+0x88>
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	98 c0       	rjmp	.+304    	; 0x12ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    117e:	aa e3       	ldi	r26, 0x3A	; 58
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	ea e3       	ldi	r30, 0x3A	; 58
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <GPIO_setupPinDirection+0xb4>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <GPIO_setupPinDirection+0xb0>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	83 c0       	rjmp	.+262    	; 0x12ae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	a1 f4       	brne	.+40     	; 0x11d6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    11ae:	a7 e3       	ldi	r26, 0x37	; 55
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e7 e3       	ldi	r30, 0x37	; 55
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <GPIO_setupPinDirection+0xe4>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <GPIO_setupPinDirection+0xe0>
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	6c c0       	rjmp	.+216    	; 0x12ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    11d6:	a7 e3       	ldi	r26, 0x37	; 55
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e7 e3       	ldi	r30, 0x37	; 55
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <GPIO_setupPinDirection+0x10c>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <GPIO_setupPinDirection+0x108>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	57 c0       	rjmp	.+174    	; 0x12ae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	a1 f4       	brne	.+40     	; 0x122e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1206:	a4 e3       	ldi	r26, 0x34	; 52
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e4 e3       	ldi	r30, 0x34	; 52
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <GPIO_setupPinDirection+0x13c>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <GPIO_setupPinDirection+0x138>
    1228:	84 2b       	or	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	40 c0       	rjmp	.+128    	; 0x12ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    122e:	a4 e3       	ldi	r26, 0x34	; 52
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e4 e3       	ldi	r30, 0x34	; 52
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <GPIO_setupPinDirection+0x164>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <GPIO_setupPinDirection+0x160>
    1250:	80 95       	com	r24
    1252:	84 23       	and	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	2b c0       	rjmp	.+86     	; 0x12ae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	a1 f4       	brne	.+40     	; 0x1286 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    125e:	a1 e3       	ldi	r26, 0x31	; 49
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e1 e3       	ldi	r30, 0x31	; 49
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <GPIO_setupPinDirection+0x194>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <GPIO_setupPinDirection+0x190>
    1280:	84 2b       	or	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	14 c0       	rjmp	.+40     	; 0x12ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1286:	a1 e3       	ldi	r26, 0x31	; 49
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e1 e3       	ldi	r30, 0x31	; 49
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <GPIO_setupPinDirection+0x1bc>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <GPIO_setupPinDirection+0x1b8>
    12a8:	80 95       	com	r24
    12aa:	84 23       	and	r24, r20
    12ac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <GPIO_writePin+0x6>
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <GPIO_writePin+0x8>
    12c6:	0f 92       	push	r0
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	6a 83       	std	Y+2, r22	; 0x02
    12d0:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	88 30       	cpi	r24, 0x08	; 8
    12d6:	08 f0       	brcs	.+2      	; 0x12da <GPIO_writePin+0x1c>
    12d8:	d5 c0       	rjmp	.+426    	; 0x1484 <GPIO_writePin+0x1c6>
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	84 30       	cpi	r24, 0x04	; 4
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <GPIO_writePin+0x24>
    12e0:	d1 c0       	rjmp	.+418    	; 0x1484 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3d 83       	std	Y+5, r19	; 0x05
    12ea:	2c 83       	std	Y+4, r18	; 0x04
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	91 05       	cpc	r25, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <GPIO_writePin+0x3a>
    12f6:	43 c0       	rjmp	.+134    	; 0x137e <GPIO_writePin+0xc0>
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	2c f4       	brge	.+10     	; 0x130c <GPIO_writePin+0x4e>
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	71 f0       	breq	.+28     	; 0x1326 <GPIO_writePin+0x68>
    130a:	bc c0       	rjmp	.+376    	; 0x1484 <GPIO_writePin+0x1c6>
    130c:	2c 81       	ldd	r18, Y+4	; 0x04
    130e:	3d 81       	ldd	r19, Y+5	; 0x05
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	09 f4       	brne	.+2      	; 0x1318 <GPIO_writePin+0x5a>
    1316:	5f c0       	rjmp	.+190    	; 0x13d6 <GPIO_writePin+0x118>
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	91 05       	cpc	r25, r1
    1320:	09 f4       	brne	.+2      	; 0x1324 <GPIO_writePin+0x66>
    1322:	85 c0       	rjmp	.+266    	; 0x142e <GPIO_writePin+0x170>
    1324:	af c0       	rjmp	.+350    	; 0x1484 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	a1 f4       	brne	.+40     	; 0x1354 <GPIO_writePin+0x96>
			{
				SET_BIT (PORTA, pin_num);
    132c:	ab e3       	ldi	r26, 0x3B	; 59
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	eb e3       	ldi	r30, 0x3B	; 59
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <GPIO_writePin+0x8c>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <GPIO_writePin+0x88>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	98 c0       	rjmp	.+304    	; 0x1484 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT (PORTA, pin_num);
    1354:	ab e3       	ldi	r26, 0x3B	; 59
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	eb e3       	ldi	r30, 0x3B	; 59
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <GPIO_writePin+0xb4>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <GPIO_writePin+0xb0>
    1376:	80 95       	com	r24
    1378:	84 23       	and	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	83 c0       	rjmp	.+262    	; 0x1484 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	a1 f4       	brne	.+40     	; 0x13ac <GPIO_writePin+0xee>
			{
				SET_BIT (PORTB, pin_num);
    1384:	a8 e3       	ldi	r26, 0x38	; 56
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e8 e3       	ldi	r30, 0x38	; 56
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_writePin+0xe4>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_writePin+0xe0>
    13a6:	84 2b       	or	r24, r20
    13a8:	8c 93       	st	X, r24
    13aa:	6c c0       	rjmp	.+216    	; 0x1484 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT (PORTB, pin_num);
    13ac:	a8 e3       	ldi	r26, 0x38	; 56
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e8 e3       	ldi	r30, 0x38	; 56
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <GPIO_writePin+0x10c>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <GPIO_writePin+0x108>
    13ce:	80 95       	com	r24
    13d0:	84 23       	and	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	57 c0       	rjmp	.+174    	; 0x1484 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	a1 f4       	brne	.+40     	; 0x1404 <GPIO_writePin+0x146>
			{
				SET_BIT (PORTC, pin_num);
    13dc:	a5 e3       	ldi	r26, 0x35	; 53
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e5 e3       	ldi	r30, 0x35	; 53
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <GPIO_writePin+0x13c>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <GPIO_writePin+0x138>
    13fe:	84 2b       	or	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	40 c0       	rjmp	.+128    	; 0x1484 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT (PORTC, pin_num);
    1404:	a5 e3       	ldi	r26, 0x35	; 53
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e5 e3       	ldi	r30, 0x35	; 53
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <GPIO_writePin+0x164>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <GPIO_writePin+0x160>
    1426:	80 95       	com	r24
    1428:	84 23       	and	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	2b c0       	rjmp	.+86     	; 0x1484 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	a1 f4       	brne	.+40     	; 0x145c <GPIO_writePin+0x19e>
			{
				SET_BIT (PORTD, pin_num);
    1434:	a2 e3       	ldi	r26, 0x32	; 50
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e2 e3       	ldi	r30, 0x32	; 50
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <GPIO_writePin+0x194>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <GPIO_writePin+0x190>
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT (PORTD, pin_num);
    145c:	a2 e3       	ldi	r26, 0x32	; 50
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e2 e3       	ldi	r30, 0x32	; 50
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <GPIO_writePin+0x1bc>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <GPIO_writePin+0x1b8>
    147e:	80 95       	com	r24
    1480:	84 23       	and	r24, r20
    1482:	8c 93       	st	X, r24
			}
		}
	}
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <GPIO_readPin+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <GPIO_readPin+0x8>
    149c:	00 d0       	rcall	.+0      	; 0x149e <GPIO_readPin+0xa>
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	8a 83       	std	Y+2, r24	; 0x02
    14a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pinValue = LOGIC_LOW;
    14a6:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	88 30       	cpi	r24, 0x08	; 8
    14ac:	18 f4       	brcc	.+6      	; 0x14b4 <GPIO_readPin+0x20>
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	18 f0       	brcs	.+6      	; 0x14ba <GPIO_readPin+0x26>
	{
		/* Return logic low if the pin is not exist */
		return pinValue;
    14b4:	29 81       	ldd	r18, Y+1	; 0x01
    14b6:	2e 83       	std	Y+6, r18	; 0x06
    14b8:	82 c0       	rjmp	.+260    	; 0x15be <GPIO_readPin+0x12a>
	}
	else
	{
		/* Return the pin value as required */
		switch (port_num)
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	48 2f       	mov	r20, r24
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	5d 83       	std	Y+5, r21	; 0x05
    14c2:	4c 83       	std	Y+4, r20	; 0x04
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	79 f1       	breq	.+94     	; 0x152c <GPIO_readPin+0x98>
    14ce:	2c 81       	ldd	r18, Y+4	; 0x04
    14d0:	3d 81       	ldd	r19, Y+5	; 0x05
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	34 f4       	brge	.+12     	; 0x14e4 <GPIO_readPin+0x50>
    14d8:	4c 81       	ldd	r20, Y+4	; 0x04
    14da:	5d 81       	ldd	r21, Y+5	; 0x05
    14dc:	41 15       	cp	r20, r1
    14de:	51 05       	cpc	r21, r1
    14e0:	69 f0       	breq	.+26     	; 0x14fc <GPIO_readPin+0x68>
    14e2:	6b c0       	rjmp	.+214    	; 0x15ba <GPIO_readPin+0x126>
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	82 30       	cpi	r24, 0x02	; 2
    14ea:	91 05       	cpc	r25, r1
    14ec:	b9 f1       	breq	.+110    	; 0x155c <GPIO_readPin+0xc8>
    14ee:	2c 81       	ldd	r18, Y+4	; 0x04
    14f0:	3d 81       	ldd	r19, Y+5	; 0x05
    14f2:	23 30       	cpi	r18, 0x03	; 3
    14f4:	31 05       	cpc	r19, r1
    14f6:	09 f4       	brne	.+2      	; 0x14fa <GPIO_readPin+0x66>
    14f8:	49 c0       	rjmp	.+146    	; 0x158c <GPIO_readPin+0xf8>
    14fa:	5f c0       	rjmp	.+190    	; 0x15ba <GPIO_readPin+0x126>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num))
    14fc:	e9 e3       	ldi	r30, 0x39	; 57
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <GPIO_readPin+0x80>
    1510:	55 95       	asr	r21
    1512:	47 95       	ror	r20
    1514:	8a 95       	dec	r24
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <GPIO_readPin+0x7c>
    1518:	ca 01       	movw	r24, r20
    151a:	81 70       	andi	r24, 0x01	; 1
    151c:	90 70       	andi	r25, 0x00	; 0
    151e:	88 23       	and	r24, r24
    1520:	19 f0       	breq	.+6      	; 0x1528 <GPIO_readPin+0x94>
			{
				pinValue = LOGIC_HIGH;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	49 c0       	rjmp	.+146    	; 0x15ba <GPIO_readPin+0x126>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1528:	19 82       	std	Y+1, r1	; 0x01
    152a:	47 c0       	rjmp	.+142    	; 0x15ba <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num))
    152c:	e6 e3       	ldi	r30, 0x36	; 54
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a9 01       	movw	r20, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <GPIO_readPin+0xb0>
    1540:	55 95       	asr	r21
    1542:	47 95       	ror	r20
    1544:	8a 95       	dec	r24
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <GPIO_readPin+0xac>
    1548:	ca 01       	movw	r24, r20
    154a:	81 70       	andi	r24, 0x01	; 1
    154c:	90 70       	andi	r25, 0x00	; 0
    154e:	88 23       	and	r24, r24
    1550:	19 f0       	breq	.+6      	; 0x1558 <GPIO_readPin+0xc4>
			{
				pinValue = LOGIC_HIGH;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	31 c0       	rjmp	.+98     	; 0x15ba <GPIO_readPin+0x126>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1558:	19 82       	std	Y+1, r1	; 0x01
    155a:	2f c0       	rjmp	.+94     	; 0x15ba <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num))
    155c:	e3 e3       	ldi	r30, 0x33	; 51
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a9 01       	movw	r20, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <GPIO_readPin+0xe0>
    1570:	55 95       	asr	r21
    1572:	47 95       	ror	r20
    1574:	8a 95       	dec	r24
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <GPIO_readPin+0xdc>
    1578:	ca 01       	movw	r24, r20
    157a:	81 70       	andi	r24, 0x01	; 1
    157c:	90 70       	andi	r25, 0x00	; 0
    157e:	88 23       	and	r24, r24
    1580:	19 f0       	breq	.+6      	; 0x1588 <GPIO_readPin+0xf4>
			{
				pinValue = LOGIC_HIGH;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	19 c0       	rjmp	.+50     	; 0x15ba <GPIO_readPin+0x126>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1588:	19 82       	std	Y+1, r1	; 0x01
    158a:	17 c0       	rjmp	.+46     	; 0x15ba <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num))
    158c:	e0 e3       	ldi	r30, 0x30	; 48
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a9 01       	movw	r20, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <GPIO_readPin+0x110>
    15a0:	55 95       	asr	r21
    15a2:	47 95       	ror	r20
    15a4:	8a 95       	dec	r24
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <GPIO_readPin+0x10c>
    15a8:	ca 01       	movw	r24, r20
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	90 70       	andi	r25, 0x00	; 0
    15ae:	88 23       	and	r24, r24
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <GPIO_readPin+0x124>
			{
				pinValue = LOGIC_HIGH;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <GPIO_readPin+0x126>
			}
			else
			{
				pinValue = LOGIC_LOW;
    15b8:	19 82       	std	Y+1, r1	; 0x01
			}
		}

	}
	return pinValue;
    15ba:	59 81       	ldd	r21, Y+1	; 0x01
    15bc:	5e 83       	std	Y+6, r21	; 0x06
    15be:	8e 81       	ldd	r24, Y+6	; 0x06
}
    15c0:	26 96       	adiw	r28, 0x06	; 6
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <GPIO_setupPortDirection+0x6>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <GPIO_setupPortDirection+0x8>
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	84 30       	cpi	r24, 0x04	; 4
    15e6:	90 f5       	brcc	.+100    	; 0x164c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3c 83       	std	Y+4, r19	; 0x04
    15f0:	2b 83       	std	Y+3, r18	; 0x03
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	d1 f0       	breq	.+52     	; 0x1630 <GPIO_setupPortDirection+0x5e>
    15fc:	2b 81       	ldd	r18, Y+3	; 0x03
    15fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1600:	22 30       	cpi	r18, 0x02	; 2
    1602:	31 05       	cpc	r19, r1
    1604:	2c f4       	brge	.+10     	; 0x1610 <GPIO_setupPortDirection+0x3e>
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	61 f0       	breq	.+24     	; 0x1626 <GPIO_setupPortDirection+0x54>
    160e:	1e c0       	rjmp	.+60     	; 0x164c <GPIO_setupPortDirection+0x7a>
    1610:	2b 81       	ldd	r18, Y+3	; 0x03
    1612:	3c 81       	ldd	r19, Y+4	; 0x04
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	81 f0       	breq	.+32     	; 0x163a <GPIO_setupPortDirection+0x68>
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	91 05       	cpc	r25, r1
    1622:	81 f0       	breq	.+32     	; 0x1644 <GPIO_setupPortDirection+0x72>
    1624:	13 c0       	rjmp	.+38     	; 0x164c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1626:	ea e3       	ldi	r30, 0x3A	; 58
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	80 83       	st	Z, r24
    162e:	0e c0       	rjmp	.+28     	; 0x164c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1630:	e7 e3       	ldi	r30, 0x37	; 55
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	80 83       	st	Z, r24
    1638:	09 c0       	rjmp	.+18     	; 0x164c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    163a:	e4 e3       	ldi	r30, 0x34	; 52
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	80 83       	st	Z, r24
    1642:	04 c0       	rjmp	.+8      	; 0x164c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1644:	e1 e3       	ldi	r30, 0x31	; 49
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	80 83       	st	Z, r24
			break;
		}
	}
}
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	00 d0       	rcall	.+0      	; 0x1660 <GPIO_writePort+0x6>
    1660:	00 d0       	rcall	.+0      	; 0x1662 <GPIO_writePort+0x8>
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	90 f5       	brcc	.+100    	; 0x16d4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port with the input value */
		switch(port_num)
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	3c 83       	std	Y+4, r19	; 0x04
    1678:	2b 83       	std	Y+3, r18	; 0x03
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	9c 81       	ldd	r25, Y+4	; 0x04
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	91 05       	cpc	r25, r1
    1682:	d1 f0       	breq	.+52     	; 0x16b8 <GPIO_writePort+0x5e>
    1684:	2b 81       	ldd	r18, Y+3	; 0x03
    1686:	3c 81       	ldd	r19, Y+4	; 0x04
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	2c f4       	brge	.+10     	; 0x1698 <GPIO_writePort+0x3e>
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	61 f0       	breq	.+24     	; 0x16ae <GPIO_writePort+0x54>
    1696:	1e c0       	rjmp	.+60     	; 0x16d4 <GPIO_writePort+0x7a>
    1698:	2b 81       	ldd	r18, Y+3	; 0x03
    169a:	3c 81       	ldd	r19, Y+4	; 0x04
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	81 f0       	breq	.+32     	; 0x16c2 <GPIO_writePort+0x68>
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	83 30       	cpi	r24, 0x03	; 3
    16a8:	91 05       	cpc	r25, r1
    16aa:	81 f0       	breq	.+32     	; 0x16cc <GPIO_writePort+0x72>
    16ac:	13 c0       	rjmp	.+38     	; 0x16d4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    16ae:	eb e3       	ldi	r30, 0x3B	; 59
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	80 83       	st	Z, r24
    16b6:	0e c0       	rjmp	.+28     	; 0x16d4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    16b8:	e8 e3       	ldi	r30, 0x38	; 56
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	80 83       	st	Z, r24
    16c0:	09 c0       	rjmp	.+18     	; 0x16d4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    16c2:	e5 e3       	ldi	r30, 0x35	; 53
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	80 83       	st	Z, r24
    16ca:	04 c0       	rjmp	.+8      	; 0x16d4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    16cc:	e2 e3       	ldi	r30, 0x32	; 50
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	80 83       	st	Z, r24
		}
	}
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_readPort+0x6>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <GPIO_readPort+0x8>
    16ea:	0f 92       	push	r0
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 portValue = LOGIC_LOW;
    16f2:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	84 30       	cpi	r24, 0x04	; 4
    16f8:	18 f0       	brcs	.+6      	; 0x1700 <GPIO_readPort+0x1e>
	{
		/* Return logic low if the port is not exist */
		return portValue;
    16fa:	29 81       	ldd	r18, Y+1	; 0x01
    16fc:	2d 83       	std	Y+5, r18	; 0x05
    16fe:	34 c0       	rjmp	.+104    	; 0x1768 <GPIO_readPort+0x86>
	}
	else
	{
		/* Return the port value */
		switch(port_num)
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	3c 83       	std	Y+4, r19	; 0x04
    1708:	2b 83       	std	Y+3, r18	; 0x03
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	91 05       	cpc	r25, r1
    1712:	d1 f0       	breq	.+52     	; 0x1748 <GPIO_readPort+0x66>
    1714:	2b 81       	ldd	r18, Y+3	; 0x03
    1716:	3c 81       	ldd	r19, Y+4	; 0x04
    1718:	22 30       	cpi	r18, 0x02	; 2
    171a:	31 05       	cpc	r19, r1
    171c:	2c f4       	brge	.+10     	; 0x1728 <GPIO_readPort+0x46>
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	61 f0       	breq	.+24     	; 0x173e <GPIO_readPort+0x5c>
    1726:	1e c0       	rjmp	.+60     	; 0x1764 <GPIO_readPort+0x82>
    1728:	2b 81       	ldd	r18, Y+3	; 0x03
    172a:	3c 81       	ldd	r19, Y+4	; 0x04
    172c:	22 30       	cpi	r18, 0x02	; 2
    172e:	31 05       	cpc	r19, r1
    1730:	81 f0       	breq	.+32     	; 0x1752 <GPIO_readPort+0x70>
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	83 30       	cpi	r24, 0x03	; 3
    1738:	91 05       	cpc	r25, r1
    173a:	81 f0       	breq	.+32     	; 0x175c <GPIO_readPort+0x7a>
    173c:	13 c0       	rjmp	.+38     	; 0x1764 <GPIO_readPort+0x82>
		{
		case PORTA_ID:
			portValue = PINA;
    173e:	e9 e3       	ldi	r30, 0x39	; 57
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	0e c0       	rjmp	.+28     	; 0x1764 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			portValue = PINB;
    1748:	e6 e3       	ldi	r30, 0x36	; 54
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	09 c0       	rjmp	.+18     	; 0x1764 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			portValue = PINC;
    1752:	e3 e3       	ldi	r30, 0x33	; 51
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			portValue = PIND;
    175c:	e0 e3       	ldi	r30, 0x30	; 48
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return portValue;
    1764:	99 81       	ldd	r25, Y+1	; 0x01
    1766:	9d 83       	std	Y+5, r25	; 0x05
    1768:	8d 81       	ldd	r24, Y+5	; 0x05
}
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection (LCD_RS_PORT, LCD_RS_PIN, PIN_OUTPUT);
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	41 e0       	ldi	r20, 0x01	; 1
    1788:	0e 94 74 08 	call	0x10e8	; 0x10e8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection (LCD_EN_PORT, LCD_EN_PIN, PIN_OUTPUT);
    178c:	83 e0       	ldi	r24, 0x03	; 3
    178e:	62 e0       	ldi	r22, 0x02	; 2
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	0e 94 74 08 	call	0x10e8	; 0x10e8 <GPIO_setupPinDirection>
	LCD_sendCommand (LCD_4BITS_INIT2);
	LCD_sendCommand (LCD_4BITS_MODE);

#elif (LCD_BIT_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection (LCD_DATA_PORT, PORT_OUTPUT);
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	6f ef       	ldi	r22, 0xFF	; 255
    179a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <GPIO_setupPortDirection>

	/* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	LCD_sendCommand (LCD_8BITS_MODE);
    179e:	88 e3       	ldi	r24, 0x38	; 56
    17a0:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_sendCommand>
#endif

	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
    17a4:	8c e0       	ldi	r24, 0x0C	; 12
    17a6:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_DISPLAY);            /* Clear LCD at the beginning */
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_sendCommand>
}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	e9 97       	sbiw	r28, 0x39	; 57
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	89 af       	std	Y+57, r24	; 0x39
	/* Instruction Mode RS=0 */
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
    17cc:	83 e0       	ldi	r24, 0x03	; 3
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e8       	ldi	r26, 0x80	; 128
    17dc:	bf e3       	ldi	r27, 0x3F	; 63
    17de:	8d ab       	std	Y+53, r24	; 0x35
    17e0:	9e ab       	std	Y+54, r25	; 0x36
    17e2:	af ab       	std	Y+55, r26	; 0x37
    17e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e6:	6d a9       	ldd	r22, Y+53	; 0x35
    17e8:	7e a9       	ldd	r23, Y+54	; 0x36
    17ea:	8f a9       	ldd	r24, Y+55	; 0x37
    17ec:	98 ad       	ldd	r25, Y+56	; 0x38
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a e7       	ldi	r20, 0x7A	; 122
    17f4:	53 e4       	ldi	r21, 0x43	; 67
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	89 ab       	std	Y+49, r24	; 0x31
    1800:	9a ab       	std	Y+50, r25	; 0x32
    1802:	ab ab       	std	Y+51, r26	; 0x33
    1804:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1806:	69 a9       	ldd	r22, Y+49	; 0x31
    1808:	7a a9       	ldd	r23, Y+50	; 0x32
    180a:	8b a9       	ldd	r24, Y+51	; 0x33
    180c:	9c a9       	ldd	r25, Y+52	; 0x34
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	5f e3       	ldi	r21, 0x3F	; 63
    1816:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    181a:	88 23       	and	r24, r24
    181c:	2c f4       	brge	.+10     	; 0x1828 <LCD_sendCommand+0x72>
		__ticks = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	98 ab       	std	Y+48, r25	; 0x30
    1824:	8f a7       	std	Y+47, r24	; 0x2f
    1826:	3f c0       	rjmp	.+126    	; 0x18a6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1828:	69 a9       	ldd	r22, Y+49	; 0x31
    182a:	7a a9       	ldd	r23, Y+50	; 0x32
    182c:	8b a9       	ldd	r24, Y+51	; 0x33
    182e:	9c a9       	ldd	r25, Y+52	; 0x34
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	4f e7       	ldi	r20, 0x7F	; 127
    1836:	57 e4       	ldi	r21, 0x47	; 71
    1838:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    183c:	18 16       	cp	r1, r24
    183e:	4c f5       	brge	.+82     	; 0x1892 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1840:	6d a9       	ldd	r22, Y+53	; 0x35
    1842:	7e a9       	ldd	r23, Y+54	; 0x36
    1844:	8f a9       	ldd	r24, Y+55	; 0x37
    1846:	98 ad       	ldd	r25, Y+56	; 0x38
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e2       	ldi	r20, 0x20	; 32
    184e:	51 e4       	ldi	r21, 0x41	; 65
    1850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	98 ab       	std	Y+48, r25	; 0x30
    1866:	8f a7       	std	Y+47, r24	; 0x2f
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <LCD_sendCommand+0xd2>
    186a:	89 e1       	ldi	r24, 0x19	; 25
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9e a7       	std	Y+46, r25	; 0x2e
    1870:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1872:	8d a5       	ldd	r24, Y+45	; 0x2d
    1874:	9e a5       	ldd	r25, Y+46	; 0x2e
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <LCD_sendCommand+0xc0>
    187a:	9e a7       	std	Y+46, r25	; 0x2e
    187c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1880:	98 a9       	ldd	r25, Y+48	; 0x30
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	98 ab       	std	Y+48, r25	; 0x30
    1886:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	8f a5       	ldd	r24, Y+47	; 0x2f
    188a:	98 a9       	ldd	r25, Y+48	; 0x30
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	69 f7       	brne	.-38     	; 0x186a <LCD_sendCommand+0xb4>
    1890:	14 c0       	rjmp	.+40     	; 0x18ba <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1892:	69 a9       	ldd	r22, Y+49	; 0x31
    1894:	7a a9       	ldd	r23, Y+50	; 0x32
    1896:	8b a9       	ldd	r24, Y+51	; 0x33
    1898:	9c a9       	ldd	r25, Y+52	; 0x34
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	98 ab       	std	Y+48, r25	; 0x30
    18a4:	8f a7       	std	Y+47, r24	; 0x2f
    18a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a8:	98 a9       	ldd	r25, Y+48	; 0x30
    18aa:	9c a7       	std	Y+44, r25	; 0x2c
    18ac:	8b a7       	std	Y+43, r24	; 0x2b
    18ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    18b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <LCD_sendCommand+0xfc>
    18b6:	9c a7       	std	Y+44, r25	; 0x2c
    18b8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);            /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	62 e0       	ldi	r22, 0x02	; 2
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a0 e8       	ldi	r26, 0x80	; 128
    18ca:	bf e3       	ldi	r27, 0x3F	; 63
    18cc:	8f a3       	std	Y+39, r24	; 0x27
    18ce:	98 a7       	std	Y+40, r25	; 0x28
    18d0:	a9 a7       	std	Y+41, r26	; 0x29
    18d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d4:	6f a1       	ldd	r22, Y+39	; 0x27
    18d6:	78 a5       	ldd	r23, Y+40	; 0x28
    18d8:	89 a5       	ldd	r24, Y+41	; 0x29
    18da:	9a a5       	ldd	r25, Y+42	; 0x2a
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4a e7       	ldi	r20, 0x7A	; 122
    18e2:	53 e4       	ldi	r21, 0x43	; 67
    18e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8b a3       	std	Y+35, r24	; 0x23
    18ee:	9c a3       	std	Y+36, r25	; 0x24
    18f0:	ad a3       	std	Y+37, r26	; 0x25
    18f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18f4:	6b a1       	ldd	r22, Y+35	; 0x23
    18f6:	7c a1       	ldd	r23, Y+36	; 0x24
    18f8:	8d a1       	ldd	r24, Y+37	; 0x25
    18fa:	9e a1       	ldd	r25, Y+38	; 0x26
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	2c f4       	brge	.+10     	; 0x1916 <LCD_sendCommand+0x160>
		__ticks = 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	9a a3       	std	Y+34, r25	; 0x22
    1912:	89 a3       	std	Y+33, r24	; 0x21
    1914:	3f c0       	rjmp	.+126    	; 0x1994 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1916:	6b a1       	ldd	r22, Y+35	; 0x23
    1918:	7c a1       	ldd	r23, Y+36	; 0x24
    191a:	8d a1       	ldd	r24, Y+37	; 0x25
    191c:	9e a1       	ldd	r25, Y+38	; 0x26
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	57 e4       	ldi	r21, 0x47	; 71
    1926:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	4c f5       	brge	.+82     	; 0x1980 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192e:	6f a1       	ldd	r22, Y+39	; 0x27
    1930:	78 a5       	ldd	r23, Y+40	; 0x28
    1932:	89 a5       	ldd	r24, Y+41	; 0x29
    1934:	9a a5       	ldd	r25, Y+42	; 0x2a
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9a a3       	std	Y+34, r25	; 0x22
    1954:	89 a3       	std	Y+33, r24	; 0x21
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <LCD_sendCommand+0x1c0>
    1958:	89 e1       	ldi	r24, 0x19	; 25
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	98 a3       	std	Y+32, r25	; 0x20
    195e:	8f 8f       	std	Y+31, r24	; 0x1f
    1960:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1962:	98 a1       	ldd	r25, Y+32	; 0x20
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <LCD_sendCommand+0x1ae>
    1968:	98 a3       	std	Y+32, r25	; 0x20
    196a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196c:	89 a1       	ldd	r24, Y+33	; 0x21
    196e:	9a a1       	ldd	r25, Y+34	; 0x22
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	9a a3       	std	Y+34, r25	; 0x22
    1974:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1976:	89 a1       	ldd	r24, Y+33	; 0x21
    1978:	9a a1       	ldd	r25, Y+34	; 0x22
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	69 f7       	brne	.-38     	; 0x1958 <LCD_sendCommand+0x1a2>
    197e:	14 c0       	rjmp	.+40     	; 0x19a8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1980:	6b a1       	ldd	r22, Y+35	; 0x23
    1982:	7c a1       	ldd	r23, Y+36	; 0x24
    1984:	8d a1       	ldd	r24, Y+37	; 0x25
    1986:	9e a1       	ldd	r25, Y+38	; 0x26
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9a a3       	std	Y+34, r25	; 0x22
    1992:	89 a3       	std	Y+33, r24	; 0x21
    1994:	89 a1       	ldd	r24, Y+33	; 0x21
    1996:	9a a1       	ldd	r25, Y+34	; 0x22
    1998:	9e 8f       	std	Y+30, r25	; 0x1e
    199a:	8d 8f       	std	Y+29, r24	; 0x1d
    199c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_sendCommand+0x1ea>
    19a4:	9e 8f       	std	Y+30, r25	; 0x1e
    19a6:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT (command, 3));
	_delay_ms(1);           /* delay for processing Tdsw = 100ns */

#elif (LCD_BIT_MODE == 8)
	/* out the required command to the data bus D0 --> D7 */
	GPIO_writePort(LCD_DATA_PORT, command);
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	69 ad       	ldd	r22, Y+57	; 0x39
    19ac:	0e 94 2d 0b 	call	0x165a	; 0x165a <GPIO_writePort>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e8       	ldi	r26, 0x80	; 128
    19b6:	bf e3       	ldi	r27, 0x3F	; 63
    19b8:	89 8f       	std	Y+25, r24	; 0x19
    19ba:	9a 8f       	std	Y+26, r25	; 0x1a
    19bc:	ab 8f       	std	Y+27, r26	; 0x1b
    19be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	69 8d       	ldd	r22, Y+25	; 0x19
    19c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a e7       	ldi	r20, 0x7A	; 122
    19ce:	53 e4       	ldi	r21, 0x43	; 67
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8d 8b       	std	Y+21, r24	; 0x15
    19da:	9e 8b       	std	Y+22, r25	; 0x16
    19dc:	af 8b       	std	Y+23, r26	; 0x17
    19de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e0:	6d 89       	ldd	r22, Y+21	; 0x15
    19e2:	7e 89       	ldd	r23, Y+22	; 0x16
    19e4:	8f 89       	ldd	r24, Y+23	; 0x17
    19e6:	98 8d       	ldd	r25, Y+24	; 0x18
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <LCD_sendCommand+0x24c>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9c 8b       	std	Y+20, r25	; 0x14
    19fe:	8b 8b       	std	Y+19, r24	; 0x13
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1a02:	6d 89       	ldd	r22, Y+21	; 0x15
    1a04:	7e 89       	ldd	r23, Y+22	; 0x16
    1a06:	8f 89       	ldd	r24, Y+23	; 0x17
    1a08:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9c 8b       	std	Y+20, r25	; 0x14
    1a40:	8b 8b       	std	Y+19, r24	; 0x13
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_sendCommand+0x2ac>
    1a44:	89 e1       	ldi	r24, 0x19	; 25
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9a 8b       	std	Y+18, r25	; 0x12
    1a4a:	89 8b       	std	Y+17, r24	; 0x11
    1a4c:	89 89       	ldd	r24, Y+17	; 0x11
    1a4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_sendCommand+0x29a>
    1a54:	9a 8b       	std	Y+18, r25	; 0x12
    1a56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	9c 8b       	std	Y+20, r25	; 0x14
    1a60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	8b 89       	ldd	r24, Y+19	; 0x13
    1a64:	9c 89       	ldd	r25, Y+20	; 0x14
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <LCD_sendCommand+0x28e>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a70:	8f 89       	ldd	r24, Y+23	; 0x17
    1a72:	98 8d       	ldd	r25, Y+24	; 0x18
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9c 8b       	std	Y+20, r25	; 0x14
    1a7e:	8b 8b       	std	Y+19, r24	; 0x13
    1a80:	8b 89       	ldd	r24, Y+19	; 0x13
    1a82:	9c 89       	ldd	r25, Y+20	; 0x14
    1a84:	98 8b       	std	Y+16, r25	; 0x10
    1a86:	8f 87       	std	Y+15, r24	; 0x0f
    1a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8a:	98 89       	ldd	r25, Y+16	; 0x10
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_sendCommand+0x2d6>
    1a90:	98 8b       	std	Y+16, r25	; 0x10
    1a92:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);           /* delay for processing Tdsw = 100ns */
#endif

	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	62 e0       	ldi	r22, 0x02	; 2
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e8       	ldi	r26, 0x80	; 128
    1aa4:	bf e3       	ldi	r27, 0x3F	; 63
    1aa6:	8b 87       	std	Y+11, r24	; 0x0b
    1aa8:	9c 87       	std	Y+12, r25	; 0x0c
    1aaa:	ad 87       	std	Y+13, r26	; 0x0d
    1aac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a e7       	ldi	r20, 0x7A	; 122
    1abc:	53 e4       	ldi	r21, 0x43	; 67
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8f 83       	std	Y+7, r24	; 0x07
    1ac8:	98 87       	std	Y+8, r25	; 0x08
    1aca:	a9 87       	std	Y+9, r26	; 0x09
    1acc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ace:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad0:	78 85       	ldd	r23, Y+8	; 0x08
    1ad2:	89 85       	ldd	r24, Y+9	; 0x09
    1ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae2:	88 23       	and	r24, r24
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9e 83       	std	Y+6, r25	; 0x06
    1aec:	8d 83       	std	Y+5, r24	; 0x05
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1af0:	6f 81       	ldd	r22, Y+7	; 0x07
    1af2:	78 85       	ldd	r23, Y+8	; 0x08
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	4c f5       	brge	.+82     	; 0x1b5a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e2       	ldi	r20, 0x20	; 32
    1b16:	51 e4       	ldi	r21, 0x41	; 65
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <LCD_sendCommand+0x39a>
    1b32:	89 e1       	ldi	r24, 0x19	; 25
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	9c 83       	std	Y+4, r25	; 0x04
    1b38:	8b 83       	std	Y+3, r24	; 0x03
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_sendCommand+0x388>
    1b42:	9c 83       	std	Y+4, r25	; 0x04
    1b44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	8d 81       	ldd	r24, Y+5	; 0x05
    1b52:	9e 81       	ldd	r25, Y+6	; 0x06
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <LCD_sendCommand+0x37c>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5c:	78 85       	ldd	r23, Y+8	; 0x08
    1b5e:	89 85       	ldd	r24, Y+9	; 0x09
    1b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	9a 83       	std	Y+2, r25	; 0x02
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_sendCommand+0x3c4>
    1b7e:	9a 83       	std	Y+2, r25	; 0x02
    1b80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);           /* delay for processing Th = 13ns */
}
    1b82:	e9 96       	adiw	r28, 0x39	; 57
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <LCD_sendData>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_sendData(uint8 data)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	e9 97       	sbiw	r28, 0x39	; 57
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	89 af       	std	Y+57, r24	; 0x39
	/* Data Mode RS=1 */
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    1baa:	83 e0       	ldi	r24, 0x03	; 3
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 e8       	ldi	r26, 0x80	; 128
    1bba:	bf e3       	ldi	r27, 0x3F	; 63
    1bbc:	8d ab       	std	Y+53, r24	; 0x35
    1bbe:	9e ab       	std	Y+54, r25	; 0x36
    1bc0:	af ab       	std	Y+55, r26	; 0x37
    1bc2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	6d a9       	ldd	r22, Y+53	; 0x35
    1bc6:	7e a9       	ldd	r23, Y+54	; 0x36
    1bc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1bca:	98 ad       	ldd	r25, Y+56	; 0x38
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a e7       	ldi	r20, 0x7A	; 122
    1bd2:	53 e4       	ldi	r21, 0x43	; 67
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	89 ab       	std	Y+49, r24	; 0x31
    1bde:	9a ab       	std	Y+50, r25	; 0x32
    1be0:	ab ab       	std	Y+51, r26	; 0x33
    1be2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1be4:	69 a9       	ldd	r22, Y+49	; 0x31
    1be6:	7a a9       	ldd	r23, Y+50	; 0x32
    1be8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bea:	9c a9       	ldd	r25, Y+52	; 0x34
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <LCD_sendData+0x72>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	98 ab       	std	Y+48, r25	; 0x30
    1c02:	8f a7       	std	Y+47, r24	; 0x2f
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <LCD_sendData+0xf0>
	else if (__tmp > 65535)
    1c06:	69 a9       	ldd	r22, Y+49	; 0x31
    1c08:	7a a9       	ldd	r23, Y+50	; 0x32
    1c0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <LCD_sendData+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c20:	7e a9       	ldd	r23, Y+54	; 0x36
    1c22:	8f a9       	ldd	r24, Y+55	; 0x37
    1c24:	98 ad       	ldd	r25, Y+56	; 0x38
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	98 ab       	std	Y+48, r25	; 0x30
    1c44:	8f a7       	std	Y+47, r24	; 0x2f
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <LCD_sendData+0xd2>
    1c48:	89 e1       	ldi	r24, 0x19	; 25
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9e a7       	std	Y+46, r25	; 0x2e
    1c4e:	8d a7       	std	Y+45, r24	; 0x2d
    1c50:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c52:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_sendData+0xc0>
    1c58:	9e a7       	std	Y+46, r25	; 0x2e
    1c5a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	98 ab       	std	Y+48, r25	; 0x30
    1c64:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c68:	98 a9       	ldd	r25, Y+48	; 0x30
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <LCD_sendData+0xb4>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <LCD_sendData+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	69 a9       	ldd	r22, Y+49	; 0x31
    1c72:	7a a9       	ldd	r23, Y+50	; 0x32
    1c74:	8b a9       	ldd	r24, Y+51	; 0x33
    1c76:	9c a9       	ldd	r25, Y+52	; 0x34
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	98 ab       	std	Y+48, r25	; 0x30
    1c82:	8f a7       	std	Y+47, r24	; 0x2f
    1c84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c86:	98 a9       	ldd	r25, Y+48	; 0x30
    1c88:	9c a7       	std	Y+44, r25	; 0x2c
    1c8a:	8b a7       	std	Y+43, r24	; 0x2b
    1c8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_sendData+0xfc>
    1c94:	9c a7       	std	Y+44, r25	; 0x2c
    1c96:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);            /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH);
    1c98:	83 e0       	ldi	r24, 0x03	; 3
    1c9a:	62 e0       	ldi	r22, 0x02	; 2
    1c9c:	41 e0       	ldi	r20, 0x01	; 1
    1c9e:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a0 e8       	ldi	r26, 0x80	; 128
    1ca8:	bf e3       	ldi	r27, 0x3F	; 63
    1caa:	8f a3       	std	Y+39, r24	; 0x27
    1cac:	98 a7       	std	Y+40, r25	; 0x28
    1cae:	a9 a7       	std	Y+41, r26	; 0x29
    1cb0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb4:	78 a5       	ldd	r23, Y+40	; 0x28
    1cb6:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a e7       	ldi	r20, 0x7A	; 122
    1cc0:	53 e4       	ldi	r21, 0x43	; 67
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8b a3       	std	Y+35, r24	; 0x23
    1ccc:	9c a3       	std	Y+36, r25	; 0x24
    1cce:	ad a3       	std	Y+37, r26	; 0x25
    1cd0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <LCD_sendData+0x160>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9a a3       	std	Y+34, r25	; 0x22
    1cf0:	89 a3       	std	Y+33, r24	; 0x21
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <LCD_sendData+0x1de>
	else if (__tmp > 65535)
    1cf4:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf6:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfa:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <LCD_sendData+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d10:	89 a5       	ldd	r24, Y+41	; 0x29
    1d12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9a a3       	std	Y+34, r25	; 0x22
    1d32:	89 a3       	std	Y+33, r24	; 0x21
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <LCD_sendData+0x1c0>
    1d36:	89 e1       	ldi	r24, 0x19	; 25
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	98 a3       	std	Y+32, r25	; 0x20
    1d3c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d40:	98 a1       	ldd	r25, Y+32	; 0x20
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_sendData+0x1ae>
    1d46:	98 a3       	std	Y+32, r25	; 0x20
    1d48:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	9a a3       	std	Y+34, r25	; 0x22
    1d52:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	89 a1       	ldd	r24, Y+33	; 0x21
    1d56:	9a a1       	ldd	r25, Y+34	; 0x22
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <LCD_sendData+0x1a2>
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <LCD_sendData+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d60:	7c a1       	ldd	r23, Y+36	; 0x24
    1d62:	8d a1       	ldd	r24, Y+37	; 0x25
    1d64:	9e a1       	ldd	r25, Y+38	; 0x26
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9a a3       	std	Y+34, r25	; 0x22
    1d70:	89 a3       	std	Y+33, r24	; 0x21
    1d72:	89 a1       	ldd	r24, Y+33	; 0x21
    1d74:	9a a1       	ldd	r25, Y+34	; 0x22
    1d76:	9e 8f       	std	Y+30, r25	; 0x1e
    1d78:	8d 8f       	std	Y+29, r24	; 0x1d
    1d7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_sendData+0x1ea>
    1d82:	9e 8f       	std	Y+30, r25	; 0x1e
    1d84:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT (data, 3));
	_delay_ms(1);            /* delay for processing Tdsw = 100ns */

#elif (LCD_BIT_MODE == 8)
	/* out the required data to the data bus D0 --> D7 */
	GPIO_writePort(LCD_DATA_PORT, data);
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	69 ad       	ldd	r22, Y+57	; 0x39
    1d8a:	0e 94 2d 0b 	call	0x165a	; 0x165a <GPIO_writePort>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e8       	ldi	r26, 0x80	; 128
    1d94:	bf e3       	ldi	r27, 0x3F	; 63
    1d96:	89 8f       	std	Y+25, r24	; 0x19
    1d98:	9a 8f       	std	Y+26, r25	; 0x1a
    1d9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1da0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	4a e7       	ldi	r20, 0x7A	; 122
    1dac:	53 e4       	ldi	r21, 0x43	; 67
    1dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	8d 8b       	std	Y+21, r24	; 0x15
    1db8:	9e 8b       	std	Y+22, r25	; 0x16
    1dba:	af 8b       	std	Y+23, r26	; 0x17
    1dbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	2c f4       	brge	.+10     	; 0x1de0 <LCD_sendData+0x24c>
		__ticks = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 8b       	std	Y+20, r25	; 0x14
    1ddc:	8b 8b       	std	Y+19, r24	; 0x13
    1dde:	3f c0       	rjmp	.+126    	; 0x1e5e <LCD_sendData+0x2ca>
	else if (__tmp > 65535)
    1de0:	6d 89       	ldd	r22, Y+21	; 0x15
    1de2:	7e 89       	ldd	r23, Y+22	; 0x16
    1de4:	8f 89       	ldd	r24, Y+23	; 0x17
    1de6:	98 8d       	ldd	r25, Y+24	; 0x18
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	3f ef       	ldi	r19, 0xFF	; 255
    1dec:	4f e7       	ldi	r20, 0x7F	; 127
    1dee:	57 e4       	ldi	r21, 0x47	; 71
    1df0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df4:	18 16       	cp	r1, r24
    1df6:	4c f5       	brge	.+82     	; 0x1e4a <LCD_sendData+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e2       	ldi	r20, 0x20	; 32
    1e06:	51 e4       	ldi	r21, 0x41	; 65
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9c 8b       	std	Y+20, r25	; 0x14
    1e1e:	8b 8b       	std	Y+19, r24	; 0x13
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <LCD_sendData+0x2ac>
    1e22:	89 e1       	ldi	r24, 0x19	; 25
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9a 8b       	std	Y+18, r25	; 0x12
    1e28:	89 8b       	std	Y+17, r24	; 0x11
    1e2a:	89 89       	ldd	r24, Y+17	; 0x11
    1e2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_sendData+0x29a>
    1e32:	9a 8b       	std	Y+18, r25	; 0x12
    1e34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e36:	8b 89       	ldd	r24, Y+19	; 0x13
    1e38:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	9c 8b       	std	Y+20, r25	; 0x14
    1e3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e40:	8b 89       	ldd	r24, Y+19	; 0x13
    1e42:	9c 89       	ldd	r25, Y+20	; 0x14
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	69 f7       	brne	.-38     	; 0x1e22 <LCD_sendData+0x28e>
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <LCD_sendData+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e50:	98 8d       	ldd	r25, Y+24	; 0x18
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9c 8b       	std	Y+20, r25	; 0x14
    1e5c:	8b 8b       	std	Y+19, r24	; 0x13
    1e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e60:	9c 89       	ldd	r25, Y+20	; 0x14
    1e62:	98 8b       	std	Y+16, r25	; 0x10
    1e64:	8f 87       	std	Y+15, r24	; 0x0f
    1e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e68:	98 89       	ldd	r25, Y+16	; 0x10
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <LCD_sendData+0x2d6>
    1e6e:	98 8b       	std	Y+16, r25	; 0x10
    1e70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);           /* delay for processing Tdsw = 100ns */
#endif

	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW);
    1e72:	83 e0       	ldi	r24, 0x03	; 3
    1e74:	62 e0       	ldi	r22, 0x02	; 2
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 5f 09 	call	0x12be	; 0x12be <GPIO_writePin>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 e8       	ldi	r26, 0x80	; 128
    1e82:	bf e3       	ldi	r27, 0x3F	; 63
    1e84:	8b 87       	std	Y+11, r24	; 0x0b
    1e86:	9c 87       	std	Y+12, r25	; 0x0c
    1e88:	ad 87       	std	Y+13, r26	; 0x0d
    1e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4a e7       	ldi	r20, 0x7A	; 122
    1e9a:	53 e4       	ldi	r21, 0x43	; 67
    1e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	8f 83       	std	Y+7, r24	; 0x07
    1ea6:	98 87       	std	Y+8, r25	; 0x08
    1ea8:	a9 87       	std	Y+9, r26	; 0x09
    1eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	5f e3       	ldi	r21, 0x3F	; 63
    1ebc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	2c f4       	brge	.+10     	; 0x1ece <LCD_sendData+0x33a>
		__ticks = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	3f c0       	rjmp	.+126    	; 0x1f4c <LCD_sendData+0x3b8>
	else if (__tmp > 65535)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	4c f5       	brge	.+82     	; 0x1f38 <LCD_sendData+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
    1ef4:	51 e4       	ldi	r21, 0x41	; 65
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	bc 01       	movw	r22, r24
    1f00:	cd 01       	movw	r24, r26
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <LCD_sendData+0x39a>
    1f10:	89 e1       	ldi	r24, 0x19	; 25
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9c 83       	std	Y+4, r25	; 0x04
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <LCD_sendData+0x388>
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	69 f7       	brne	.-38     	; 0x1f10 <LCD_sendData+0x37c>
    1f36:	14 c0       	rjmp	.+40     	; 0x1f60 <LCD_sendData+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	9a 81       	ldd	r25, Y+2	; 0x02
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_sendData+0x3c4>
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);           /* delay for processing Th = 13ns */
}
    1f60:	e9 96       	adiw	r28, 0x39	; 57
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(char * ptr)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <LCD_displayString+0x6>
    1f78:	0f 92       	push	r0
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	9b 83       	std	Y+3, r25	; 0x03
    1f80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i = 0; ptr[i] != '\0'; i++)
    1f82:	19 82       	std	Y+1, r1	; 0x01
    1f84:	0e c0       	rjmp	.+28     	; 0x1fa2 <LCD_displayString+0x30>
	{
		LCD_sendData(ptr[i]);
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	fc 01       	movw	r30, r24
    1f92:	e2 0f       	add	r30, r18
    1f94:	f3 1f       	adc	r31, r19
    1f96:	80 81       	ld	r24, Z
    1f98:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_sendData>
 * Display the required string on the screen
 */
void LCD_displayString(char * ptr)
{
	uint8 i;
	for(i = 0; ptr[i] != '\0'; i++)
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	8f 5f       	subi	r24, 0xFF	; 255
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	9b 81       	ldd	r25, Y+3	; 0x03
    1fac:	fc 01       	movw	r30, r24
    1fae:	e2 0f       	add	r30, r18
    1fb0:	f3 1f       	adc	r31, r19
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 23       	and	r24, r24
    1fb6:	39 f7       	brne	.-50     	; 0x1f86 <LCD_displayString+0x14>
	{
		LCD_sendData(ptr[i]);
	}
}
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <LCD_moveCursor+0x6>
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <LCD_moveCursor+0x8>
    1fcc:	0f 92       	push	r0
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	8a 83       	std	Y+2, r24	; 0x02
    1fd4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 position = FIRST_ROW_ADDRESS;
    1fd6:	19 82       	std	Y+1, r1	; 0x01

	/* Calculate the required address in the LCD DDRAM */
	switch (row)
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	3d 83       	std	Y+5, r19	; 0x05
    1fe0:	2c 83       	std	Y+4, r18	; 0x04
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	91 05       	cpc	r25, r1
    1fea:	c1 f0       	breq	.+48     	; 0x201c <LCD_moveCursor+0x58>
    1fec:	2c 81       	ldd	r18, Y+4	; 0x04
    1fee:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff0:	22 30       	cpi	r18, 0x02	; 2
    1ff2:	31 05       	cpc	r19, r1
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <LCD_moveCursor+0x3c>
    1ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	61 f0       	breq	.+24     	; 0x2016 <LCD_moveCursor+0x52>
    1ffe:	19 c0       	rjmp	.+50     	; 0x2032 <LCD_moveCursor+0x6e>
    2000:	2c 81       	ldd	r18, Y+4	; 0x04
    2002:	3d 81       	ldd	r19, Y+5	; 0x05
    2004:	22 30       	cpi	r18, 0x02	; 2
    2006:	31 05       	cpc	r19, r1
    2008:	69 f0       	breq	.+26     	; 0x2024 <LCD_moveCursor+0x60>
    200a:	8c 81       	ldd	r24, Y+4	; 0x04
    200c:	9d 81       	ldd	r25, Y+5	; 0x05
    200e:	83 30       	cpi	r24, 0x03	; 3
    2010:	91 05       	cpc	r25, r1
    2012:	61 f0       	breq	.+24     	; 0x202c <LCD_moveCursor+0x68>
    2014:	0e c0       	rjmp	.+28     	; 0x2032 <LCD_moveCursor+0x6e>
	{
	case 0:
		position = FIRST_ROW_ADDRESS + col;
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	0b c0       	rjmp	.+22     	; 0x2032 <LCD_moveCursor+0x6e>
		break;
	case 1:
		position = SECOND_ROW_ADDRESS + col;
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	80 5c       	subi	r24, 0xC0	; 192
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	07 c0       	rjmp	.+14     	; 0x2032 <LCD_moveCursor+0x6e>
		break;
	case 2:
		position = THIRD_ROW_ADDRESS + col;
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	80 5f       	subi	r24, 0xF0	; 240
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	03 c0       	rjmp	.+6      	; 0x2032 <LCD_moveCursor+0x6e>
		break;
	case 3:
		position = FOURTH_ROW_ADDRESS + col;
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	80 5b       	subi	r24, 0xB0	; 176
    2030:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Move the LCD cursor to this specific address */
	SET_BIT (position, PIN7_ID);
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	80 68       	ori	r24, 0x80	; 128
    2036:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(position);
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_sendCommand>
}
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand (CLEAR_DISPLAY);   /* Send clear display command */
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_sendCommand>
}
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <LCD_displayInteger>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_displayInteger(sint32 num)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	64 97       	sbiw	r28, 0x14	; 20
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	69 8b       	std	Y+17, r22	; 0x11
    2078:	7a 8b       	std	Y+18, r23	; 0x12
    207a:	8b 8b       	std	Y+19, r24	; 0x13
    207c:	9c 8b       	std	Y+20, r25	; 0x14
	char buffer [16] = {0};           /* String to hold the ascii result */
    207e:	80 e1       	ldi	r24, 0x10	; 16
    2080:	fe 01       	movw	r30, r28
    2082:	31 96       	adiw	r30, 0x01	; 1
    2084:	df 01       	movw	r26, r30
    2086:	98 2f       	mov	r25, r24
    2088:	1d 92       	st	X+, r1
    208a:	9a 95       	dec	r25
    208c:	e9 f7       	brne	.-6      	; 0x2088 <LCD_displayInteger+0x26>
	itoa (num, buffer, 10);           /* Convert the data to its corresponding ASCII value, 10 for decimal */
    208e:	89 89       	ldd	r24, Y+17	; 0x11
    2090:	9a 89       	ldd	r25, Y+18	; 0x12
    2092:	9e 01       	movw	r18, r28
    2094:	2f 5f       	subi	r18, 0xFF	; 255
    2096:	3f 4f       	sbci	r19, 0xFF	; 255
    2098:	b9 01       	movw	r22, r18
    209a:	4a e0       	ldi	r20, 0x0A	; 10
    209c:	50 e0       	ldi	r21, 0x00	; 0
    209e:	0e 94 22 12 	call	0x2444	; 0x2444 <itoa>
	LCD_displayString(buffer);
    20a2:	ce 01       	movw	r24, r28
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_displayString>
}
    20aa:	64 96       	adiw	r28, 0x14	; 20
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <LCD_createCharacter>:
/*
 * Description :
 * Create a specific character pattern in the CGROM
 */
void LCD_createCharacter(uint8 location, uint8* character)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <LCD_createCharacter+0x6>
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <LCD_createCharacter+0x8>
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	8a 83       	std	Y+2, r24	; 0x02
    20ca:	7c 83       	std	Y+4, r23	; 0x04
    20cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 i = 0;
    20ce:	19 82       	std	Y+1, r1	; 0x01
	/* Move the LCD to the first byte address for the new character block in CGROM */
	LCD_sendCommand (CGROM_ADDRESS + (location*8));
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	08 96       	adiw	r24, 0x08	; 8
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <LCD_sendCommand>

	/* Fill the CGROM block byte by byte with the pattern of the required character */
	for (i = 0; i < 8; i++)
    20e8:	19 82       	std	Y+1, r1	; 0x01
    20ea:	0e c0       	rjmp	.+28     	; 0x2108 <LCD_createCharacter+0x4c>
	{
		LCD_sendData (character[i]);
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	fc 01       	movw	r30, r24
    20f8:	e2 0f       	add	r30, r18
    20fa:	f3 1f       	adc	r31, r19
    20fc:	80 81       	ld	r24, Z
    20fe:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_sendData>
	uint8 i = 0;
	/* Move the LCD to the first byte address for the new character block in CGROM */
	LCD_sendCommand (CGROM_ADDRESS + (location*8));

	/* Fill the CGROM block byte by byte with the pattern of the required character */
	for (i = 0; i < 8; i++)
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	8f 5f       	subi	r24, 0xFF	; 255
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	88 30       	cpi	r24, 0x08	; 8
    210c:	78 f3       	brcs	.-34     	; 0x20ec <LCD_createCharacter+0x30>
	{
		LCD_sendData (character[i]);
	}
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <LM_35_readTemp>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM_35_readTemp (void)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <LM_35_readTemp+0x6>
    2122:	0f 92       	push	r0
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
	uint16 digitalRead = 0;
    2128:	1b 82       	std	Y+3, r1	; 0x03
    212a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 temp = 0;
    212c:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	digitalRead =  ADC_readChannel (LM_35_SENSOR_CHANNEL);
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	0e 94 ac 07 	call	0xf58	; 0xf58 <ADC_readChannel>
    2134:	9b 83       	std	Y+3, r25	; 0x03
    2136:	8a 83       	std	Y+2, r24	; 0x02

	/* Calculate the temperature from the ADC value */
	temp =(uint8)((LM_35_MAX_TEMPERATURE * (uint32)digitalRead * ADC_VOLTAGE_REFERENCE) \
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	9b 81       	ldd	r25, Y+3	; 0x03
    213c:	cc 01       	movw	r24, r24
    213e:	a0 e0       	ldi	r26, 0x00	; 0
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	26 e9       	ldi	r18, 0x96	; 150
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	bc 01       	movw	r22, r24
    214c:	cd 01       	movw	r24, r26
    214e:	0e 94 cc 11 	call	0x2398	; 0x2398 <__mulsi3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	2a e0       	ldi	r18, 0x0A	; 10
    2168:	37 ed       	ldi	r19, 0xD7	; 215
    216a:	43 e2       	ldi	r20, 0x23	; 35
    216c:	50 e4       	ldi	r21, 0x40	; 64
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 ed       	ldi	r19, 0xD0	; 208
    217e:	4f eb       	ldi	r20, 0xBF	; 191
    2180:	54 e4       	ldi	r21, 0x44	; 68
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	89 83       	std	Y+1, r24	; 0x01
			/ (ADC_MAX_DIGITAL_VALUE * LM_35_MAX_VOLTAGE));
	return temp;
    2198:	89 81       	ldd	r24, Y+1	; 0x01
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <main>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
int main (void)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <main+0x6>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <main+0x8>
    21ae:	0f 92       	push	r0
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
	/* Created as register variable as it will be used too much in the program */
	register uint8 temprature = 0;
    21b4:	1b 82       	std	Y+3, r1	; 0x03

	/* ADC initialization Vref and prescaler */
	ADC_ConfigType s_configuration = {INTERNAL, FCPU_8};
    21b6:	83 e0       	ldi	r24, 0x03	; 3
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	8a 83       	std	Y+2, r24	; 0x02
	ADC_init (& s_configuration);
    21be:	ce 01       	movw	r24, r28
    21c0:	01 96       	adiw	r24, 0x01	; 1
    21c2:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_init>

	/* Initialize LCD and DC motor modules */
	LCD_init();
    21c6:	0e 94 bd 0b 	call	0x177a	; 0x177a <LCD_init>
	DcMotor_init();
    21ca:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DcMotor_init>

	/* Display the fixed data on LCD */
	LCD_moveCursor (1,3);
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	63 e0       	ldi	r22, 0x03	; 3
    21d2:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_moveCursor>
	LCD_displayString ("FAN IS ");
    21d6:	80 e6       	ldi	r24, 0x60	; 96
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_displayString>
	LCD_moveCursor (2,2);
    21de:	82 e0       	ldi	r24, 0x02	; 2
    21e0:	62 e0       	ldi	r22, 0x02	; 2
    21e2:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_moveCursor>
	LCD_displayString ("TEMP =     C");
    21e6:	88 e6       	ldi	r24, 0x68	; 104
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_displayString>

	for(;;)
	{
		temprature = LM_35_readTemp ();               /* Read the temperature each loop */
    21ee:	0e 94 8e 10 	call	0x211c	; 0x211c <LM_35_readTemp>
    21f2:	8b 83       	std	Y+3, r24	; 0x03
		/* Display the temperature on LCD */
		LCD_moveCursor (2,9);
    21f4:	82 e0       	ldi	r24, 0x02	; 2
    21f6:	69 e0       	ldi	r22, 0x09	; 9
    21f8:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_moveCursor>
		if (temprature >= 100)
    21fc:	2b 81       	ldd	r18, Y+3	; 0x03
    21fe:	24 36       	cpi	r18, 0x64	; 100
    2200:	50 f0       	brcs	.+20     	; 0x2216 <main+0x70>
		{
			LCD_displayInteger((sint32)temprature);
    2202:	3b 81       	ldd	r19, Y+3	; 0x03
    2204:	83 2f       	mov	r24, r19
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a0 e0       	ldi	r26, 0x00	; 0
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	bc 01       	movw	r22, r24
    220e:	cd 01       	movw	r24, r26
    2210:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_displayInteger>
    2214:	0c c0       	rjmp	.+24     	; 0x222e <main+0x88>
		}
		else
		{
			LCD_displayInteger((sint32)temprature);
    2216:	2b 81       	ldd	r18, Y+3	; 0x03
    2218:	82 2f       	mov	r24, r18
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a0 e0       	ldi	r26, 0x00	; 0
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_displayInteger>
			LCD_sendData (' ');
    2228:	80 e2       	ldi	r24, 0x20	; 32
    222a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_sendData>
		}

		/* Check the temperature value then determine the speed and state of the fan */
		if (temprature >= 120)
    222e:	3b 81       	ldd	r19, Y+3	; 0x03
    2230:	38 37       	cpi	r19, 0x78	; 120
    2232:	40 f0       	brcs	.+16     	; 0x2244 <main+0x9e>
		{
			DcMotor_rotate (CW, MAX_SPEED);
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	64 e6       	ldi	r22, 0x64	; 100
    2238:	0e 94 0c 08 	call	0x1018	; 0x1018 <DcMotor_rotate>
			g_motorState = ON;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	80 93 86 01 	sts	0x0186, r24
    2242:	25 c0       	rjmp	.+74     	; 0x228e <main+0xe8>
		}
		else if (temprature >= 90)
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	8a 35       	cpi	r24, 0x5A	; 90
    2248:	40 f0       	brcs	.+16     	; 0x225a <main+0xb4>
		{
			DcMotor_rotate (CW, THREE_QUARTERS_SPEED);
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	6b e4       	ldi	r22, 0x4B	; 75
    224e:	0e 94 0c 08 	call	0x1018	; 0x1018 <DcMotor_rotate>
			g_motorState = ON;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	80 93 86 01 	sts	0x0186, r24
    2258:	1a c0       	rjmp	.+52     	; 0x228e <main+0xe8>
		}
		else if (temprature >= 60)
    225a:	9b 81       	ldd	r25, Y+3	; 0x03
    225c:	9c 33       	cpi	r25, 0x3C	; 60
    225e:	40 f0       	brcs	.+16     	; 0x2270 <main+0xca>
		{
			DcMotor_rotate (CW, HALF_SPEED);
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	62 e3       	ldi	r22, 0x32	; 50
    2264:	0e 94 0c 08 	call	0x1018	; 0x1018 <DcMotor_rotate>
			g_motorState = ON;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	80 93 86 01 	sts	0x0186, r24
    226e:	0f c0       	rjmp	.+30     	; 0x228e <main+0xe8>
		}
		else if (temprature >= 30)
    2270:	2b 81       	ldd	r18, Y+3	; 0x03
    2272:	2e 31       	cpi	r18, 0x1E	; 30
    2274:	40 f0       	brcs	.+16     	; 0x2286 <main+0xe0>
		{
			DcMotor_rotate (CW, QUARTER_SPEED);
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	69 e1       	ldi	r22, 0x19	; 25
    227a:	0e 94 0c 08 	call	0x1018	; 0x1018 <DcMotor_rotate>
			g_motorState = ON;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	80 93 86 01 	sts	0x0186, r24
    2284:	04 c0       	rjmp	.+8      	; 0x228e <main+0xe8>
		}
		else
		{
			DcMotor_stop ();
    2286:	0e 94 5f 08 	call	0x10be	; 0x10be <DcMotor_stop>
			g_motorState = OFF;
    228a:	10 92 86 01 	sts	0x0186, r1
		}

		/* Display the fan state after determining it */
		switch (g_motorState)
    228e:	80 91 86 01 	lds	r24, 0x0186
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	3d 83       	std	Y+5, r19	; 0x05
    2298:	2c 83       	std	Y+4, r18	; 0x04
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	9d 81       	ldd	r25, Y+5	; 0x05
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	79 f0       	breq	.+30     	; 0x22c0 <main+0x11a>
    22a2:	2c 81       	ldd	r18, Y+4	; 0x04
    22a4:	3d 81       	ldd	r19, Y+5	; 0x05
    22a6:	21 30       	cpi	r18, 0x01	; 1
    22a8:	31 05       	cpc	r19, r1
    22aa:	09 f0       	breq	.+2      	; 0x22ae <main+0x108>
    22ac:	a0 cf       	rjmp	.-192    	; 0x21ee <main+0x48>
		{
		case ON:
			LCD_moveCursor (1,10);
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	6a e0       	ldi	r22, 0x0A	; 10
    22b2:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_moveCursor>
			LCD_displayString("ON ");
    22b6:	85 e7       	ldi	r24, 0x75	; 117
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_displayString>
    22be:	97 cf       	rjmp	.-210    	; 0x21ee <main+0x48>
			break;
		case OFF:
			LCD_moveCursor (1,10);
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	6a e0       	ldi	r22, 0x0A	; 10
    22c4:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_moveCursor>
			LCD_displayString("OFF");
    22c8:	89 e7       	ldi	r24, 0x79	; 121
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_displayString>
    22d0:	8e cf       	rjmp	.-228    	; 0x21ee <main+0x48>

000022d2 <PWM_Timer0_start>:
 *3. Setup the compare value based on the required input duty cycle
 *4. Setup the direction for OC0 as output pin through the GPIO driver.
 *5. The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */
void PWM_Timer0_start(uint8 duty_cycle)
{
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	0f 92       	push	r0
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;                       /* Set timer register initial value to 0 */
    22e2:	e2 e5       	ldi	r30, 0x52	; 82
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	10 82       	st	Z, r1
	/* Fast PWM Mode WGM01 = 1 & WGM00 = 1 */
	SET_BIT (TCCR0, WGM00);
    22e8:	a3 e5       	ldi	r26, 0x53	; 83
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e3 e5       	ldi	r30, 0x53	; 83
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	80 64       	ori	r24, 0x40	; 64
    22f4:	8c 93       	st	X, r24
	SET_BIT (TCCR0, WGM01);
    22f6:	a3 e5       	ldi	r26, 0x53	; 83
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e3 e5       	ldi	r30, 0x53	; 83
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	88 60       	ori	r24, 0x08	; 8
    2302:	8c 93       	st	X, r24

	SET_BIT (TCCR0, COM01);          /* Clear OC0 when match occurs (non inverted mode) COM00 = 0 & COM01 = 1 */
    2304:	a3 e5       	ldi	r26, 0x53	; 83
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e3 e5       	ldi	r30, 0x53	; 83
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	80 62       	ori	r24, 0x20	; 32
    2310:	8c 93       	st	X, r24
	SET_BIT (TCCR0, CS01);           /* Clock = F_CPU/8 by making CS00 = 0, CS01 = 1, CS02 = 0 */
    2312:	a3 e5       	ldi	r26, 0x53	; 83
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e3 e5       	ldi	r30, 0x53	; 83
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	82 60       	ori	r24, 0x02	; 2
    231e:	8c 93       	st	X, r24
	OCR0 = ceil ((duty_cycle / 100.0) * TIMER0_TOP_VALUE);    /* Set compare value */
    2320:	0c e5       	ldi	r16, 0x5C	; 92
    2322:	10 e0       	ldi	r17, 0x00	; 0
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	aa 27       	eor	r26, r26
    232c:	97 fd       	sbrc	r25, 7
    232e:	a0 95       	com	r26
    2330:	ba 2f       	mov	r27, r26
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	48 ec       	ldi	r20, 0xC8	; 200
    2348:	52 e4       	ldi	r21, 0x42	; 66
    234a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	53 e4       	ldi	r21, 0x43	; 67
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 43 12 	call	0x2486	; 0x2486 <ceil>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	f8 01       	movw	r30, r16
    2380:	80 83       	st	Z, r24
	GPIO_setupPinDirection (PORTB_ID, PIN3_ID, PIN_OUTPUT);   /* Configure PB3/OC0 as output pin */
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	63 e0       	ldi	r22, 0x03	; 3
    2386:	41 e0       	ldi	r20, 0x01	; 1
    2388:	0e 94 74 08 	call	0x10e8	; 0x10e8 <GPIO_setupPinDirection>
}
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	1f 91       	pop	r17
    2394:	0f 91       	pop	r16
    2396:	08 95       	ret

00002398 <__mulsi3>:
    2398:	62 9f       	mul	r22, r18
    239a:	d0 01       	movw	r26, r0
    239c:	73 9f       	mul	r23, r19
    239e:	f0 01       	movw	r30, r0
    23a0:	82 9f       	mul	r24, r18
    23a2:	e0 0d       	add	r30, r0
    23a4:	f1 1d       	adc	r31, r1
    23a6:	64 9f       	mul	r22, r20
    23a8:	e0 0d       	add	r30, r0
    23aa:	f1 1d       	adc	r31, r1
    23ac:	92 9f       	mul	r25, r18
    23ae:	f0 0d       	add	r31, r0
    23b0:	83 9f       	mul	r24, r19
    23b2:	f0 0d       	add	r31, r0
    23b4:	74 9f       	mul	r23, r20
    23b6:	f0 0d       	add	r31, r0
    23b8:	65 9f       	mul	r22, r21
    23ba:	f0 0d       	add	r31, r0
    23bc:	99 27       	eor	r25, r25
    23be:	72 9f       	mul	r23, r18
    23c0:	b0 0d       	add	r27, r0
    23c2:	e1 1d       	adc	r30, r1
    23c4:	f9 1f       	adc	r31, r25
    23c6:	63 9f       	mul	r22, r19
    23c8:	b0 0d       	add	r27, r0
    23ca:	e1 1d       	adc	r30, r1
    23cc:	f9 1f       	adc	r31, r25
    23ce:	bd 01       	movw	r22, r26
    23d0:	cf 01       	movw	r24, r30
    23d2:	11 24       	eor	r1, r1
    23d4:	08 95       	ret

000023d6 <__prologue_saves__>:
    23d6:	2f 92       	push	r2
    23d8:	3f 92       	push	r3
    23da:	4f 92       	push	r4
    23dc:	5f 92       	push	r5
    23de:	6f 92       	push	r6
    23e0:	7f 92       	push	r7
    23e2:	8f 92       	push	r8
    23e4:	9f 92       	push	r9
    23e6:	af 92       	push	r10
    23e8:	bf 92       	push	r11
    23ea:	cf 92       	push	r12
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	ca 1b       	sub	r28, r26
    2400:	db 0b       	sbc	r29, r27
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	09 94       	ijmp

0000240e <__epilogue_restores__>:
    240e:	2a 88       	ldd	r2, Y+18	; 0x12
    2410:	39 88       	ldd	r3, Y+17	; 0x11
    2412:	48 88       	ldd	r4, Y+16	; 0x10
    2414:	5f 84       	ldd	r5, Y+15	; 0x0f
    2416:	6e 84       	ldd	r6, Y+14	; 0x0e
    2418:	7d 84       	ldd	r7, Y+13	; 0x0d
    241a:	8c 84       	ldd	r8, Y+12	; 0x0c
    241c:	9b 84       	ldd	r9, Y+11	; 0x0b
    241e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2420:	b9 84       	ldd	r11, Y+9	; 0x09
    2422:	c8 84       	ldd	r12, Y+8	; 0x08
    2424:	df 80       	ldd	r13, Y+7	; 0x07
    2426:	ee 80       	ldd	r14, Y+6	; 0x06
    2428:	fd 80       	ldd	r15, Y+5	; 0x05
    242a:	0c 81       	ldd	r16, Y+4	; 0x04
    242c:	1b 81       	ldd	r17, Y+3	; 0x03
    242e:	aa 81       	ldd	r26, Y+2	; 0x02
    2430:	b9 81       	ldd	r27, Y+1	; 0x01
    2432:	ce 0f       	add	r28, r30
    2434:	d1 1d       	adc	r29, r1
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	ed 01       	movw	r28, r26
    2442:	08 95       	ret

00002444 <itoa>:
    2444:	fb 01       	movw	r30, r22
    2446:	9f 01       	movw	r18, r30
    2448:	e8 94       	clt
    244a:	42 30       	cpi	r20, 0x02	; 2
    244c:	c4 f0       	brlt	.+48     	; 0x247e <itoa+0x3a>
    244e:	45 32       	cpi	r20, 0x25	; 37
    2450:	b4 f4       	brge	.+44     	; 0x247e <itoa+0x3a>
    2452:	4a 30       	cpi	r20, 0x0A	; 10
    2454:	29 f4       	brne	.+10     	; 0x2460 <itoa+0x1c>
    2456:	97 fb       	bst	r25, 7
    2458:	1e f4       	brtc	.+6      	; 0x2460 <itoa+0x1c>
    245a:	90 95       	com	r25
    245c:	81 95       	neg	r24
    245e:	9f 4f       	sbci	r25, 0xFF	; 255
    2460:	64 2f       	mov	r22, r20
    2462:	77 27       	eor	r23, r23
    2464:	0e 94 cf 12 	call	0x259e	; 0x259e <__udivmodhi4>
    2468:	80 5d       	subi	r24, 0xD0	; 208
    246a:	8a 33       	cpi	r24, 0x3A	; 58
    246c:	0c f0       	brlt	.+2      	; 0x2470 <itoa+0x2c>
    246e:	89 5d       	subi	r24, 0xD9	; 217
    2470:	81 93       	st	Z+, r24
    2472:	cb 01       	movw	r24, r22
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	a1 f7       	brne	.-24     	; 0x2460 <itoa+0x1c>
    2478:	16 f4       	brtc	.+4      	; 0x247e <itoa+0x3a>
    247a:	5d e2       	ldi	r21, 0x2D	; 45
    247c:	51 93       	st	Z+, r21
    247e:	10 82       	st	Z, r1
    2480:	c9 01       	movw	r24, r18
    2482:	0c 94 9d 12 	jmp	0x253a	; 0x253a <strrev>

00002486 <ceil>:
    2486:	3b d0       	rcall	.+118    	; 0x24fe <__fp_trunc>
    2488:	80 f0       	brcs	.+32     	; 0x24aa <ceil+0x24>
    248a:	9f 37       	cpi	r25, 0x7F	; 127
    248c:	40 f4       	brcc	.+16     	; 0x249e <ceil+0x18>
    248e:	91 11       	cpse	r25, r1
    2490:	0e f4       	brtc	.+2      	; 0x2494 <ceil+0xe>
    2492:	4d c0       	rjmp	.+154    	; 0x252e <__fp_szero>
    2494:	60 e0       	ldi	r22, 0x00	; 0
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	80 e8       	ldi	r24, 0x80	; 128
    249a:	9f e3       	ldi	r25, 0x3F	; 63
    249c:	08 95       	ret
    249e:	26 f0       	brts	.+8      	; 0x24a8 <ceil+0x22>
    24a0:	1b 16       	cp	r1, r27
    24a2:	61 1d       	adc	r22, r1
    24a4:	71 1d       	adc	r23, r1
    24a6:	81 1d       	adc	r24, r1
    24a8:	01 c0       	rjmp	.+2      	; 0x24ac <__fp_mintl>
    24aa:	1b c0       	rjmp	.+54     	; 0x24e2 <__fp_mpack>

000024ac <__fp_mintl>:
    24ac:	88 23       	and	r24, r24
    24ae:	71 f4       	brne	.+28     	; 0x24cc <__fp_mintl+0x20>
    24b0:	77 23       	and	r23, r23
    24b2:	21 f0       	breq	.+8      	; 0x24bc <__fp_mintl+0x10>
    24b4:	98 50       	subi	r25, 0x08	; 8
    24b6:	87 2b       	or	r24, r23
    24b8:	76 2f       	mov	r23, r22
    24ba:	07 c0       	rjmp	.+14     	; 0x24ca <__fp_mintl+0x1e>
    24bc:	66 23       	and	r22, r22
    24be:	11 f4       	brne	.+4      	; 0x24c4 <__fp_mintl+0x18>
    24c0:	99 27       	eor	r25, r25
    24c2:	0d c0       	rjmp	.+26     	; 0x24de <__fp_mintl+0x32>
    24c4:	90 51       	subi	r25, 0x10	; 16
    24c6:	86 2b       	or	r24, r22
    24c8:	70 e0       	ldi	r23, 0x00	; 0
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	2a f0       	brmi	.+10     	; 0x24d8 <__fp_mintl+0x2c>
    24ce:	9a 95       	dec	r25
    24d0:	66 0f       	add	r22, r22
    24d2:	77 1f       	adc	r23, r23
    24d4:	88 1f       	adc	r24, r24
    24d6:	da f7       	brpl	.-10     	; 0x24ce <__fp_mintl+0x22>
    24d8:	88 0f       	add	r24, r24
    24da:	96 95       	lsr	r25
    24dc:	87 95       	ror	r24
    24de:	97 f9       	bld	r25, 7
    24e0:	08 95       	ret

000024e2 <__fp_mpack>:
    24e2:	9f 3f       	cpi	r25, 0xFF	; 255
    24e4:	31 f0       	breq	.+12     	; 0x24f2 <__fp_mpack_finite+0xc>

000024e6 <__fp_mpack_finite>:
    24e6:	91 50       	subi	r25, 0x01	; 1
    24e8:	20 f4       	brcc	.+8      	; 0x24f2 <__fp_mpack_finite+0xc>
    24ea:	87 95       	ror	r24
    24ec:	77 95       	ror	r23
    24ee:	67 95       	ror	r22
    24f0:	b7 95       	ror	r27
    24f2:	88 0f       	add	r24, r24
    24f4:	91 1d       	adc	r25, r1
    24f6:	96 95       	lsr	r25
    24f8:	87 95       	ror	r24
    24fa:	97 f9       	bld	r25, 7
    24fc:	08 95       	ret

000024fe <__fp_trunc>:
    24fe:	35 d0       	rcall	.+106    	; 0x256a <__fp_splitA>
    2500:	a0 f0       	brcs	.+40     	; 0x252a <__fp_trunc+0x2c>
    2502:	be e7       	ldi	r27, 0x7E	; 126
    2504:	b9 17       	cp	r27, r25
    2506:	88 f4       	brcc	.+34     	; 0x252a <__fp_trunc+0x2c>
    2508:	bb 27       	eor	r27, r27
    250a:	9f 38       	cpi	r25, 0x8F	; 143
    250c:	60 f4       	brcc	.+24     	; 0x2526 <__fp_trunc+0x28>
    250e:	16 16       	cp	r1, r22
    2510:	b1 1d       	adc	r27, r1
    2512:	67 2f       	mov	r22, r23
    2514:	78 2f       	mov	r23, r24
    2516:	88 27       	eor	r24, r24
    2518:	98 5f       	subi	r25, 0xF8	; 248
    251a:	f7 cf       	rjmp	.-18     	; 0x250a <__fp_trunc+0xc>
    251c:	86 95       	lsr	r24
    251e:	77 95       	ror	r23
    2520:	67 95       	ror	r22
    2522:	b1 1d       	adc	r27, r1
    2524:	93 95       	inc	r25
    2526:	96 39       	cpi	r25, 0x96	; 150
    2528:	c8 f3       	brcs	.-14     	; 0x251c <__fp_trunc+0x1e>
    252a:	08 95       	ret

0000252c <__fp_zero>:
    252c:	e8 94       	clt

0000252e <__fp_szero>:
    252e:	bb 27       	eor	r27, r27
    2530:	66 27       	eor	r22, r22
    2532:	77 27       	eor	r23, r23
    2534:	cb 01       	movw	r24, r22
    2536:	97 f9       	bld	r25, 7
    2538:	08 95       	ret

0000253a <strrev>:
    253a:	dc 01       	movw	r26, r24
    253c:	fc 01       	movw	r30, r24
    253e:	67 2f       	mov	r22, r23
    2540:	71 91       	ld	r23, Z+
    2542:	77 23       	and	r23, r23
    2544:	e1 f7       	brne	.-8      	; 0x253e <strrev+0x4>
    2546:	32 97       	sbiw	r30, 0x02	; 2
    2548:	04 c0       	rjmp	.+8      	; 0x2552 <strrev+0x18>
    254a:	7c 91       	ld	r23, X
    254c:	6d 93       	st	X+, r22
    254e:	70 83       	st	Z, r23
    2550:	62 91       	ld	r22, -Z
    2552:	ae 17       	cp	r26, r30
    2554:	bf 07       	cpc	r27, r31
    2556:	c8 f3       	brcs	.-14     	; 0x254a <strrev+0x10>
    2558:	08 95       	ret

0000255a <__fp_split3>:
    255a:	57 fd       	sbrc	r21, 7
    255c:	90 58       	subi	r25, 0x80	; 128
    255e:	44 0f       	add	r20, r20
    2560:	55 1f       	adc	r21, r21
    2562:	59 f0       	breq	.+22     	; 0x257a <__fp_splitA+0x10>
    2564:	5f 3f       	cpi	r21, 0xFF	; 255
    2566:	71 f0       	breq	.+28     	; 0x2584 <__fp_splitA+0x1a>
    2568:	47 95       	ror	r20

0000256a <__fp_splitA>:
    256a:	88 0f       	add	r24, r24
    256c:	97 fb       	bst	r25, 7
    256e:	99 1f       	adc	r25, r25
    2570:	61 f0       	breq	.+24     	; 0x258a <__fp_splitA+0x20>
    2572:	9f 3f       	cpi	r25, 0xFF	; 255
    2574:	79 f0       	breq	.+30     	; 0x2594 <__fp_splitA+0x2a>
    2576:	87 95       	ror	r24
    2578:	08 95       	ret
    257a:	12 16       	cp	r1, r18
    257c:	13 06       	cpc	r1, r19
    257e:	14 06       	cpc	r1, r20
    2580:	55 1f       	adc	r21, r21
    2582:	f2 cf       	rjmp	.-28     	; 0x2568 <__fp_split3+0xe>
    2584:	46 95       	lsr	r20
    2586:	f1 df       	rcall	.-30     	; 0x256a <__fp_splitA>
    2588:	08 c0       	rjmp	.+16     	; 0x259a <__fp_splitA+0x30>
    258a:	16 16       	cp	r1, r22
    258c:	17 06       	cpc	r1, r23
    258e:	18 06       	cpc	r1, r24
    2590:	99 1f       	adc	r25, r25
    2592:	f1 cf       	rjmp	.-30     	; 0x2576 <__fp_splitA+0xc>
    2594:	86 95       	lsr	r24
    2596:	71 05       	cpc	r23, r1
    2598:	61 05       	cpc	r22, r1
    259a:	08 94       	sec
    259c:	08 95       	ret

0000259e <__udivmodhi4>:
    259e:	aa 1b       	sub	r26, r26
    25a0:	bb 1b       	sub	r27, r27
    25a2:	51 e1       	ldi	r21, 0x11	; 17
    25a4:	07 c0       	rjmp	.+14     	; 0x25b4 <__udivmodhi4_ep>

000025a6 <__udivmodhi4_loop>:
    25a6:	aa 1f       	adc	r26, r26
    25a8:	bb 1f       	adc	r27, r27
    25aa:	a6 17       	cp	r26, r22
    25ac:	b7 07       	cpc	r27, r23
    25ae:	10 f0       	brcs	.+4      	; 0x25b4 <__udivmodhi4_ep>
    25b0:	a6 1b       	sub	r26, r22
    25b2:	b7 0b       	sbc	r27, r23

000025b4 <__udivmodhi4_ep>:
    25b4:	88 1f       	adc	r24, r24
    25b6:	99 1f       	adc	r25, r25
    25b8:	5a 95       	dec	r21
    25ba:	a9 f7       	brne	.-22     	; 0x25a6 <__udivmodhi4_loop>
    25bc:	80 95       	com	r24
    25be:	90 95       	com	r25
    25c0:	bc 01       	movw	r22, r24
    25c2:	cd 01       	movw	r24, r26
    25c4:	08 95       	ret

000025c6 <_exit>:
    25c6:	f8 94       	cli

000025c8 <__stop_program>:
    25c8:	ff cf       	rjmp	.-2      	; 0x25c8 <__stop_program>
